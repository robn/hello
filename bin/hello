#!/usr/bin/env perl

use 5.020;
use warnings;
use strict;
use experimental qw(postderef);

use IO::Async::Loop;
use TOML qw(from_toml);
use Module::Runtime qw(require_module);
use Defined::KV;
use Hello::World;
use Hello::Logger '$Logger';

my ($config, $err) = from_toml(do { local (@ARGV, $/) = ('config.toml'); <> });
warn $err unless $config;

#use Data::Dumper;
#print Dumper $config;

my $default_config = delete $config->{tester}->{_defaults_} // {};
my $default_interval = delete $default_config->{interval};
my $default_timeout  = delete $default_config->{timeout};

my $loop = IO::Async::Loop->new;

my @collectors;

for my $collector_type (keys $config->{collector}->%*) {
  my $collector_config = delete $config->{collector}->{$collector_type} // {};

  my $collector_package = "Hello::Collector::$collector_type";
  require_module($collector_package);

  my $collector = $collector_package->new(
    loop => $loop,
    %$collector_config,
  );

  $Logger->log("created '$collector_type' collector");

  $collector->init;

  push @collectors, $collector;
}

my @testers;

for my $tester_type (keys $config->{tester}->%*) {
  my $tester_list = delete $config->{tester}->{$tester_type} // [];

  my $tester_package = "Hello::Tester::$tester_type";
  require_module($tester_package);

  for my $tester_config ($tester_list->@*) {
    my $tester_interval = delete $tester_config->{interval} // $default_interval;
    my $tester_timeout  = delete $tester_config->{timeout}  // $default_timeout;

    my $tester = $tester_package->new(
      loop     => $loop,
      defined_kv(interval => $tester_interval),
      defined_kv(timeout  => $tester_timeout),
      %$tester_config,
    );

    $Logger->log(join('; ',
      "created '$tester_type' tester",
      "name: ".$tester->name,
      "interval: ".$tester->interval,
      "timeout: ".$tester->timeout,
    ));

    push @testers, $tester;
  }
}

Hello::World->new(
  loop => $loop,
  collectors => \@collectors,
  testers => \@testers,
)->go->get;

#my @f = map { [$_->get] } Future->wait_all(map { $_->test } @testers)->get;
#use Data::Dumper;
#print Dumper \@f;
